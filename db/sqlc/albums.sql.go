// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: albums.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAlbum = `-- name: CreateAlbum :one
Insert INTO albums (id, title, artist, price)
VALUES ($1, $2, $3, $4)
RETURNING id, title, artist, price
`

type CreateAlbumParams struct {
	ID     uuid.UUID
	Title  string
	Artist string
	Price  string
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum,
		arg.ID,
		arg.Title,
		arg.Artist,
		arg.Price,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM albums
WHERE id = $1
`

func (q *Queries) DeleteAlbum(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAlbum, id)
	return err
}

const getAlbum = `-- name: GetAlbum :one
SELECT id, title, artist, price
FROM albums
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAlbum(ctx context.Context, id uuid.UUID) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbum, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}

const listAlbums = `-- name: ListAlbums :many
SELECT id, title, artist, price
FROM albums
`

func (q *Queries) ListAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, listAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlbum = `-- name: UpdateAlbum :exec
Update albums
SET title = $2, artist = $3, price = $4
WHERE id = $1
`

type UpdateAlbumParams struct {
	ID     uuid.UUID
	Title  string
	Artist string
	Price  string
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) error {
	_, err := q.db.ExecContext(ctx, updateAlbum,
		arg.ID,
		arg.Title,
		arg.Artist,
		arg.Price,
	)
	return err
}
